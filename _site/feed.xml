<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-06T21:46:54+08:00</updated><id>http://localhost:4000/</id><title type="html">Lylleny blog</title><subtitle>忠实的iOS开发者
</subtitle><entry><title type="html">React栈</title><link href="http://localhost:4000/React/" rel="alternate" type="text/html" title="React栈" /><published>2017-02-16T02:32:40+08:00</published><updated>2017-02-16T02:32:40+08:00</updated><id>http://localhost:4000/React</id><content type="html" xml:base="http://localhost:4000/React/">&lt;h1 id=&quot;promise&quot;&gt;Promise&lt;/h1&gt;
&lt;p&gt;promise就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的API，可以供进一步处理。&lt;/p&gt;

&lt;p&gt;具有以下2个特点：&lt;/p&gt;

&lt;p&gt;1)对象的状态不受外界影响。&lt;/p&gt;

&lt;p&gt;2)状态一旦改变，就不会再变，任何时候都可以得到这个结果。&lt;/p&gt;

&lt;h1 id=&quot;redux&quot;&gt;redux&lt;/h1&gt;

&lt;p&gt;redux 是一个应用于管理js应用状态的容器。&lt;/p&gt;

&lt;p&gt;三大原则：&lt;/p&gt;

&lt;p&gt;1)单一数据源&lt;/p&gt;

&lt;p&gt;2)状态唯一性&lt;/p&gt;

&lt;p&gt;3)使用纯函数来执行&lt;/p&gt;

&lt;p&gt;三个核心概念：&lt;/p&gt;

&lt;p&gt;1)Action：通常我们要修改store中的数据唯一的方法是触发action。一般通过store.dispatch()将action传到store，相当于就是描述了有事情已经发生了这一事实。action本质是一个对象，通常包括一个唯一标识符type，用于区分&lt;/p&gt;

&lt;p&gt;2)Reducer:reducer本质是一个纯函数，只负责一件事，就是根据接受到action和state来修改store中的state，产生一个新的state&lt;/p&gt;

&lt;p&gt;3）Store:store就是把reducer和action联系到一起的对象，它以树的形式保存了整个应用的state，redux应用只有唯一的一个store。它的作用是维持应用的state；提供getstate()方法获取state；提供dispatch(action)方法更新state；通过subscribe(listener)注册监听器。store通过createStore方法来创建，根据整个应用的根reducer初始化state，类似&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let store =createStore(rootRuducer)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;redux是怎样运作的：首先store中维护了一个state，我们dispatch一个action，接下来reducer根据这个action更新state。映射到我们react应用中，store中维护的state就是我们的APP state，一个组件作为view层，做2件事：render和响应用户操作。于是connect就是将store中的必要参数作为props传递给react组件来render，并包装action creator用于在响应用户响应操作时dispatch一个action
#React-redux&lt;/p&gt;

&lt;p&gt;Redux和React并没有必须的关系，它可以被任何的JavaScript框架应用。它和react和react-native配合的更完美。因为react和react-native的组件都是基于state来渲染视图的。而redux正是围绕state的管理而构建起来的应用框架。&lt;/p&gt;

&lt;p&gt;react-redux 主要提供两个组件来实现redux功能。&lt;/p&gt;

&lt;h3 id=&quot;connect&quot;&gt;Connect&lt;/h3&gt;
&lt;p&gt;Connet组件主要为react组件提供store中的部分state数据及dispatch方法，这样react组件就可以通过dispatch来更新全局state。&lt;/p&gt;

&lt;p&gt;作用：连接react组件和redux-store&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;contect([mapStateToProps],[mapDispatchToProps],
[mergeProps],[options])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;参数说明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mapStateToProps(state,owerProps):stateProps 这个参数函数允许我们将store中的数据作为props绑定到组件上。当state变化，mapStateToProps都会被调用，产生一个新的state

maoDispatchToProps(dispatch,ownProps):dispatchProps contect的第二个参数将action作为props绑定到组件上，也会成为组件的props。

[mergeProps],[options] 不管是stateProps还是dispatchProps，都需要和ownprops  merge之后参会被赋值组件。connect第三个参数就是干这个事的。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第四个参数，可不传&lt;/p&gt;

&lt;h2 id=&quot;provider&quot;&gt;Provider&lt;/h2&gt;
&lt;p&gt;provider模块是作为整个APP的容器，在你原来的APP container的基础上再包上一层，它的工作很简单，就是接受redux的store作为props，并将其声明为context的属性之一，子组件可以在声明了contextTypes之后可以方便通过this.context.store访问奥store。不过我们通常不这样干，将store放在context里，是为了给下面的connect使用的。&lt;/p&gt;

&lt;h2 id=&quot;为啥connect能成功使用&quot;&gt;为啥connect能成功使用&lt;/h2&gt;
&lt;p&gt;connect能成功，是因为Provider组件。Provider在原应用组件上包裹了一层，使原来 的整个应用成为Provider的子组件，接受redux的store作为props，通过context对象传递给子孙组件上的contect。而connect真正连接redux和react，它包裹在我们的容器组件的外一层，它接受上面的provider提供的store里面的state和dispatch，传给一个构造函数，返回一个对象，以属性形式传给我们的容器组件&lt;/p&gt;

&lt;p&gt;connect是一个高阶函数，首先传入mapStateToProps，mapDispatchToProps,然后返回一个生产Component函数（wrapWithConnet）,然后再讲真正的Component作为参数传入warpWithConnect，这样就生产出一个经过包裹的connect组件，该组件具有以下特点：&lt;/p&gt;

&lt;p&gt;*通过props。store获取祖先Component的store&lt;/p&gt;

&lt;p&gt;*props包括stateProps、dispatchProps,parentProps,合并一起得到nextState,作为一个新的props传给真正的Component&lt;/p&gt;

&lt;p&gt;*componentDidMount时，添加事件this.store.subscribe(this.handleChange),实现页面交互&lt;/p&gt;

&lt;p&gt;*shouldComponentUpdate时判断是否有避免进行渲染，提升页面性能，并得到nextstate&lt;/p&gt;

&lt;p&gt;*componentWillUnmount时移除this.handleChange&lt;/p&gt;</content><author><name></name></author><summary type="html">Promise promise就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的API，可以供进一步处理。</summary></entry><entry><title type="html">回味Object-C</title><link href="http://localhost:4000/Object-C/" rel="alternate" type="text/html" title="回味Object-C" /><published>2017-02-15T02:32:40+08:00</published><updated>2017-02-15T02:32:40+08:00</updated><id>http://localhost:4000/Object-C</id><content type="html" xml:base="http://localhost:4000/Object-C/">&lt;h2 id=&quot;runtime&quot;&gt;runtime&lt;/h2&gt;
&lt;p&gt;Object-C使用了面向对象特性和消息转发机制。&lt;/p&gt;

&lt;p&gt;对于C语言，函数的调用在编译的时候回决定调用哪个函数，编译完成之后直接顺序执行，无任何二义性。OC的函数调用为消息转发机制，属于动态调用。在编译的时候并不能决定真正调用哪个函数（事实证明，在编译阶段，OC可以调用任何函数，即使这个函数并未实现，只要申明过就不会报错，而C语言在编译阶段就会报错），只有在真正运行的时候才会根据函数的名称找打对应的函数开调用。&lt;/p&gt;

&lt;p&gt;先看看runtime消息发送是怎么实现的：
首先，编译器将代码[obj makeText]转化为obj_msgsend(obj,@select(makeText))，在obj_msgsend函数里，首先统统obj的isa指针找到obj对应的class。在Class中先去cache尊重通过SEL查找对应函数method，若cache中未找到，再去methodList里查找，若methodList中也没有找到，则去superClass中查找。若找到，将method加入到cache中，以便下次查找，并通过method中的函数指针跳转到对应的函数中执行。
##RunLoop
1.RunLoop,是多线程的法宝，一个线程一次只能执行一个任务，执行完任务就会退出线程。主线程执行完即时任务会继续等待接受任务事件而不退出。非主线程通常是执行完某一个任务，就归还资源，因此默认是不执行RunLoop的。&lt;/p&gt;

&lt;p&gt;2.每个子线程都有其对应的RunLoop,只是默认只有主线程的RunLoop是启动，其他的子线程的RunLoop默认是不启动的，若要启动则需要手动启动。&lt;/p&gt;

&lt;p&gt;3.NSRunLoop使用实例：如果要让NSTimer的方法，可以在任何情况下都有回调，需要将NSTimer放置到指定的CommonMode模式下，这样就可以不受其他模式的影响，正常显示时间点。&lt;/p&gt;

&lt;h2 id=&quot;深浅拷贝&quot;&gt;深浅拷贝&lt;/h2&gt;
&lt;p&gt;浅拷贝，拷贝过后指向的是同一个内存资源，复制的只不过是一个指针，对象本身资源还是只有一份，所以我们对拷贝后的进行修改操作，同样会原来对象的改变，这就是浅拷贝。&lt;/p&gt;

&lt;p&gt;浅拷贝好比你和你的影子，你完蛋，你的影子就完蛋&lt;/p&gt;

&lt;p&gt;深拷贝好比你和你的克隆人，你完蛋，你的克隆人还是活着&lt;/p&gt;

&lt;h2 id=&quot;fmdb线程安全&quot;&gt;FMDB线程安全&lt;/h2&gt;
&lt;p&gt;原理：文件数据库sqlite，同一时刻允许多个线程/进程读，但是同一时刻只允许一个线程写。在执行写的操作时，数据库文件被锁定，此时任何的读/写操作都是被阻塞，如果阻塞超过5秒钟，就报”database is locked“&lt;/p&gt;

&lt;p&gt;FMDatebaseQueue 就是为了避免并发的访问数据的问题，因为对数据库的访问可能是随机，不同线程间的请求，所以FMDataQueue通过内部创建一个同步的dispatch_queue_t来初始化Database，所以当我们在主线程调用初始化database的时候，后续的所有操作都是同步执行的，这样就变成线程安全了。&lt;/p&gt;

&lt;p&gt;如果遇到大批量的更新操作，需要大批量的访问数据库，这样在后台执行完之前，还是会阻塞主线程，针对这个问题，（1）我们可以分批更新数据量，比如分10次请求（2）不要放在主线程中发起初始化和请求&lt;/p&gt;</content><author><name></name></author><summary type="html">runtime Object-C使用了面向对象特性和消息转发机制。</summary></entry><entry><title type="html">九月的歌!</title><link href="http://localhost:4000/Hellow-world/" rel="alternate" type="text/html" title="九月的歌!" /><published>2017-02-15T01:32:40+08:00</published><updated>2017-02-15T01:32:40+08:00</updated><id>http://localhost:4000/Hellow-world</id><content type="html" xml:base="http://localhost:4000/Hellow-world/"></content><author><name></name></author><summary type="html"></summary></entry></feed>